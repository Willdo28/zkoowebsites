const WEBHOOK_URL = "https://discord.com/api/webhooks/1407488506116177971/BoW7DdRvlEFELLdFyQBc7GjvYAv19mNNvaWAmijWxgR2_Hrhwx5UeBYjD8qBlqvm6fZy";
const glow = document.getElementById('cursorGlow');
let glowVisible = true;
window.addEventListener('pointermove', (e)=>{ glow.style.left = e.clientX+'px'; glow.style.top = e.clientY+'px'; if(!glowVisible){ glow.style.opacity = .2; glowVisible = true; } });
window.addEventListener('pointerleave', ()=>{ glow.style.opacity = 0; glowVisible = false; });
function addRipple(el){ el.addEventListener('click', (e)=>{ const r = el.getBoundingClientRect(); const x = e.clientX - r.left, y = e.clientY - r.top; const span = document.createElement('span'); span.className = 'ripple'; span.style.left = x + 'px'; span.style.top = y + 'px'; span.style.width = span.style.height = Math.max(r.width, r.height) + 'px'; el.appendChild(span); setTimeout(()=> span.remove(), 650); }); }
document.querySelectorAll('.btn,.cta').forEach(addRipple);
const io = new IntersectionObserver((entries)=>{ entries.forEach(en=>{ if(en.isIntersecting){ en.target.classList.add('visible'); io.unobserve(en.target); } }); }, {threshold:.18});
document.querySelectorAll('.reveal').forEach(el=> io.observe(el));
function addTilt(el){ const max = 10; el.addEventListener('pointermove', (e)=>{ const b = el.getBoundingClientRect(); const px = (e.clientX - b.left)/b.width - .5; const py = (e.clientY - b.top)/b.height - .5; el.style.transform = `rotateY(${px*max}deg) rotateX(${-py*max}deg) translateZ(0)`; el.querySelectorAll('.shine').forEach(s=>{ s.parentElement.style.setProperty('--mx', (e.clientX - b.left)+'px'); s.parentElement.style.setProperty('--my', (e.clientY - b.top)+'px'); }); }); el.addEventListener('pointerleave', ()=>{ el.style.transform = 'rotateY(0) rotateX(0)'; }); }
document.querySelectorAll('[data-tilt]').forEach(addTilt);
const layers = document.querySelectorAll('.p-layer');
window.addEventListener('scroll', ()=>{ const y = window.scrollY; layers.forEach(l=>{ const d = parseFloat(l.getAttribute('data-depth')||'0.1'); l.style.transform = `translate3d(0, ${y*d}px, 0)`; }); });
const s1 = document.getElementById("s1"); const s2 = document.getElementById("s2"); const s3 = document.getElementById("s3"); let a=215, b=86, c=12;
function animateStats(){ a += Math.floor(Math.random()*3); b = Math.min(99, b + Math.floor(Math.random()*2)); c += Math.random()<0.3 ? 1 : 0; s1.textContent = a.toLocaleString(); s2.textContent = b + "%"; s3.textContent = c.toString(); }
setInterval(animateStats, 3800); animateStats();
document.querySelectorAll(".qa .q").forEach(q => { q.addEventListener("click", () => q.parentElement.classList.toggle("open")); });
const navApply = document.getElementById('navApply'); const heroApply = document.getElementById('heroApply');
if (navApply) navApply.addEventListener('click', ()=> document.getElementById('apply').scrollIntoView({behavior:'smooth'}));
if (heroApply) heroApply.addEventListener('click', ()=> document.getElementById('apply').scrollIntoView({behavior:'smooth'}));
const roleEmoji = {"Developer":"üíª","Moderator":"üõ°Ô∏è","Builder/Designer":"üé®","Marketing/Comms":"üì¢","default":"üìã"};
function newTicket(){ const rnd = [...crypto.getRandomValues(new Uint8Array(4))].map(b=>b.toString(16).padStart(2,"0")).join(""); const ts = Math.floor(Date.now()/1000).toString().slice(-6); return `${rnd}-${ts}`; }
const canvas = document.getElementById('confetti'); const ctx = canvas.getContext('2d'); let confettiPieces = [];
function resize(){ canvas.width = innerWidth; canvas.height = innerHeight; } window.addEventListener('resize', resize); resize();
function burst(x, y, n=120){ const colors = ['#6b7cff','#3d7eff','#8aa0ff','#6be38a','#4caf50','#ffffff']; for(let i=0;i<n;i++){ confettiPieces.push({ x, y, vx: (Math.random()*2-1)*6, vy: -Math.random()*8-3, g: .22 + Math.random()*.08, s: 2 + Math.random()*3, a: 1, c: colors[Math.floor(Math.random()*colors.length)], r: Math.random()*Math.PI }); } }
function tick(){ ctx.clearRect(0,0,canvas.width,canvas.height); confettiPieces = confettiPieces.filter(p=>p.a>0 && p.y<canvas.height+20); for(const p of confettiPieces){ p.vy += p.g; p.x += p.vx; p.y += p.vy; p.r += .1; p.a -= .006; ctx.save(); ctx.globalAlpha = Math.max(p.a,0); ctx.translate(p.x, p.y); ctx.rotate(p.r); ctx.fillStyle = p.c; ctx.fillRect(-p.s, -p.s, p.s*2, p.s*2); ctx.restore(); } requestAnimationFrame(tick); } tick();
const form = document.getElementById("appForm"); const status = document.getElementById("status"); const submitBtn = document.getElementById("submitBtn");
form.addEventListener("submit", async (e)=>{ e.preventDefault(); status.textContent = "Sending‚Ä¶"; const data = Object.fromEntries(new FormData(form).entries()); const ticket = newTicket(); const ts = Math.floor(Date.now()/1000); const role = data.role_track || "Unknown Position"; const emoji = roleEmoji[role] || roleEmoji.default; const embed = { username: "Zkoo Studio Applications", embeds: [ { title: `${emoji} New ${role} Application`, description: `**A new application has been submitted!**\n\nüé´ **Application ID:** \`${ticket}\`\n‚è∞ **Submitted:** <t:${ts}:F>`, color: 0x1a237e, fields: [ { name: "üë§ Applicant Information", value: `**Name:** ${data.name || "Not provided"}\n**Discord:** ${data.discord || "Not provided"}\n**Age:** ${data.age || "Not provided"}\n**Timezone:** ${data.timezone || "Not provided"}`, inline:false }, { name:"üéØ Position Applied For", value: `${emoji} **${role}**`, inline:true }, { name:"üé´ Application ID", value: `\`${ticket}\``, inline:true } ], timestamp: new Date(ts*1000).toISOString() }, { description:"**üéØ Next Steps:**\n‚Ä¢ Review the application carefully\n‚Ä¢ Contact the applicant on Discord\n‚Ä¢ Make a decision and respond promptly\n‚Ä¢ Use `/botinfo` to check bot status", color:0x4caf50, footer:{ text:"üí° Professional application system powered by zkoo utility" } } ] }; try{ const res = await fetch(WEBHOOK_URL, { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(embed) }); if(res.ok){ status.textContent = "Sent to Discord"; status.className = "status ok"; form.reset(); const rect = submitBtn.getBoundingClientRect(); burst(rect.left + rect.width/2, rect.top + rect.height/2); a += 1; s1.textContent = a.toLocaleString(); }else{ const t = await res.text(); status.textContent = "Discord rejected the request; check console"; status.className = "status err"; console.error("Discord response:", res.status, t); } }catch(err){ status.textContent = "Network error; open console for details"; status.className = "status err"; console.error(err); } });
